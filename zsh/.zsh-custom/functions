#------------------------------------------------------------------
#   Common
#------------------------------------------------------------------
__x() {
  echo "+ $@"
  $@
}

which() {
  if ! /usr/bin/which $@
  then
    type $1 | head -1
  fi
}
#------------------------------------------------------------------

cleanenv() {
	if [ $# -ne 0]; then
		env -i \
			HOME=\"$HOME\" \
			PATH=\"$PATH\" \
			LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH\" \
			TERM=\"$TERM\" \
			USER=\"$USER\" \
			zsh -c $@
	else
		echo "Usage: cleanenv <program> [arglist]" 1>&2
	fi
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
tre() {
  if [ -x $(command -v tree) ]; then
    tree -aC -I '.git' --dirsfirst "$@" | less -FRNX
  else
    echo "Error! This command requires 'tree' to be installed"
  fi
}

# Go up $1 directories
up() {
  for i in $(seq 1 $1); do 
    builtin cd ..; 
  done; 
  pwd;
}

# Install deb file
deb() {
  sudo -v
  TEMP_DEB='/tmp/'$(basename $1)
  wget -q --show-progress -O "$TEMP_DEB" $1
  sudo dpkg -i "$TEMP_DEB"
  rm -f "$TEMP_DEB"
}

apt-clean() {
    sudo apt-get clean
    sudo apt-get autoclean
    sudo apt-get autoremove
}

# copy file content to clipboard
copy() {
  cat $1 | xclip -sel clipboard
}

# Print README file
readme() {
  for readme in {readme,README}.{md,MD,markdown,mkd,txt,TXT}; do
    if [[ -x "$(command -v glow)" ]] && [[ -f "$readme" ]]; then
      glow "$readme"
    elif [[ -x "$(command -v bat)" ]] && [[ -f "$readme" ]]; then
      bat "$readme"
    elif [[ -f "$readme" ]]; then
      cat "$readme"
    fi
  done
}

bro() {curl bropages.org/$1.json | jq -r ".[].msg" | highlight --out-format=truecolor --syntax=bash | less -R}

toEN() {curl "https://de.pons.com/_translate/translate" --data "source_language=fr&target_language=en&service=deepl&text=""$*""&lookup=true&requested_by=Web&source_language_confirmed=true" | jq .translation}
toFR() {curl "https://de.pons.com/_translate/translate" --data "source_language=en&target_language=fr&service=deepl&text=""$*""&lookup=true&requested_by=Web&source_language_confirmed=true" | jq .translation}

# whenis: Try to make sense of the date. It supports everything GNU date knows how to
# parse, as well as UNIX timestamps. It formats the given date using the
# default GNU date format, which you can override using "--format='%x %y %z'.
#
# usage:
#
#   $ whenis 1234567890            # UNIX timestamps
#   Sat Feb 14 00:31:30 CET 2009
#
#   $ whenis +1 year -3 months     # relative dates
#   Fri Jul 20 21:51:27 CEST 2012
#
#   $ whenis 2011-10-09 08:07:06   # MySQL DATETIME strings
#   Sun Oct  9 08:07:06 CEST 2011
#
#   $ whenis 1979-10-14T12:00:00.001-04:00 # HTML5 global date and time
#   Sun Oct 14 17:00:00 CET 1979
#
#   $ TZ=America/Vancouver whenis # Current time in Vancouver
#   Thu Oct 20 13:04:20 PDT 2011
#
# For more info, check out http://kak.be/gnudateformats.
whenis() {
  # Default GNU date format as seen in date.c from GNU coreutils.
  local format='%a %b %e %H:%M:%S %Z %Y'
  if [[ "$1" =~ ^--format= ]]; then
    format="${1#--format=}"
    shift
  fi

  # Concatenate all arguments as one string specifying the date.
  local date="$*"
  if [[ "$date"  =~ ^[[:space:]]*$ ]]; then
    date='now'
  elif [[ "$date"  =~ ^[0-9]{13}$ ]]; then
    # Cut the microseconds part.
    date="${date:0:10}"
  fi

  # Use GNU date in all other situations.
  [[ "$date" =~ ^[0-9]+$ ]] && date="@$date"
  date -d "$date" +"$format"
}

# os-info: show some info about your system
os-info() {
  lsb_release -a
  uname -a

  if [ -z /etc/lsb-release ]; then
    cat /etc/lsb-release;
  fi;

  if [ -z /etc/issue ]; then
    cat /etc/issue;
  fi;

  if [ -z /proc/version ]; then
    cat /proc/version;
  fi;
}

# passwdgen: a password generator
#
# usage: passwdgen 8 --> e.g.: f4lwka_2f
passwdgen()
{
  if [ $1 ]; then
    local length=$1
  else
    local length=16
  fi

  tr -dc A-Za-z0-9_ < /dev/urandom  | head -c${1:-${length}} | xargs
}

zsh-history-fix() {
  mv ~/.zsh_history ~/.zsh_history_bad
  strings ~/.zsh_history_bad > ~/.zsh_history
  fc -R ~/.zsh_history
  rm ~/.zsh_history_bad
}

d() {
  if [[ -n $1 ]]; then
    dirs "$@"
  else
    dirs -v | head -10
  fi
}

find_port_in_use() {
  # https://stackoverflow.com/a/4421674/826820
  lsof -nP "-i4TCP:$1" | grep LISTEN
}

display_colors() {
  echo "PALETTE OF 8 COLORS (bold, high intensity, normal, faint)"
  for i in {30..37}; do printf "\e[1;${i}m1;%-2s      \e[m" "$i"; done; echo
  for i in {90..97}; do printf "\e[${i}m%+4s      \e[m" "$i"; done; echo
  for i in {30..37}; do printf "\e[${i}m%+4s      \e[m" "$i"; done; echo
  for i in {30..37}; do printf "\e[2;${i}m2;%-2s      \e[m" "$i"; done;

  echo -e "\n\n\nPALETTE OF 256 COLORS (only normal)"
  j=8
  for i in {0..255}; do
    [[ $i = 16 ]] && j=6
    [[ $i = 232 ]] && j=8
    printf "\e[38;5;${i}m38;5;%-4s\e[m" "${i}"
    (( i>15 && i<232 )) && printf "\e[52C\e[1;38;5;${i}m1;38;5;%-4s\e[52C\e[m\e[2;38;5;${i}m2;38;5;%-4s\e[m\e[126D" "${i}" "${i}"
    [[ $(( $(( $i - 15 )) % $j )) = 0 ]] && echo
    [[ $(( $(( $i - 15 )) % $(( $j * 6 )) )) = 0 ]] && echo
  done
}

explain() {
  if [ ! $(command -v w3m) ]; then
    echo "Error! This command requires 'w3m' to be installed"
    return
  fi
  local command=$@
  curl -G -L https://www.explainshell.com/explain --data-urlencode "cmd=$command" | w3m -T text/html -o display_borders=true -o confirm_qq=false
}

#------------------------------------------------------------------
#   Helpers with Fuzzy Search
#------------------------------------------------------------------

# fe [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fe() {
  local files
  IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
  [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
}

# mnemonic: [K]ill [P]rocess
# show output of "ps -ef", use [tab] to select one or multiple entries
# press [enter] to kill selected processes and go back to the process list or press [escape] to exit completely.
kp() {
  local pid=$(ps -ef | sed 1d | eval "fzf ${FZF_DEFAULT_OPTS} -m --header='[kill:process]'" | awk '{print $2}')

  if [ "x$pid" != "x" ]; then
    echo $pid | xargs kill -${1:-9}
    kp
  fi
}

# mnemonic: [F]ind [P]ath
# list directories in $PATH, press [enter] on an entry to list the executables inside.
# press [escape] to go back to directory listing, [escape] twice to exit completely
fp() {
  local loc=$(echo $PATH | sed -e $'s/:/\\\n/g' | eval "fzf ${FZF_DEFAULT_OPTS} --header='[find:path]'")

  if [[ -d $loc ]]; then
    echo "$(rg --files $loc | rev | cut -d"/" -f1 | rev)" | eval "fzf ${FZF_DEFAULT_OPTS} --header='[find:exe] => ${loc}' >/dev/null"
    fp
  fi
}

# Man fuzzy search
# The output can be colorized by passing the parameter "--bat"
fman() {
  local pager="${MANPAGER:-less}"
  if [[ "$1" =~ ^--bat ]]; then
    pager="sh -c 'col -bx | bat -l man -p'"
    shift
  fi
  local manual
  if [ $# -eq 0 ]; then
    manual=$(man -k . | fzf --prompt='Man> ' | awk '{print $1}')
  else
    manual=$@
    if [ -z "$(/usr/bin/man -f $@ 2>/dev/null)" ]; then
      manual=$(man -k $@ | fzf --prompt='Man> ' | awk '{print $1}')
    fi
  fi
  MANPAGER="${pager}" man "$manual"
}

j() {
  if [ ! $(command -v autojump) ]; then
    echo "Error! This command requires 'autojump' to be installed"
    return
  fi
  if [[ "$#" -ne 0 ]]; then
    cd $(autojump $@)
    return
  fi
  cd "$(autojump -s | sort -k1gr | awk '$1 ~ /[0-9]:/ && $2 ~ /^\// { for (i=2; i<=NF; i++) { print $(i) } }' |  fzf --height 40% --reverse --inline-info)" 
}

z() {
  if [ ! $(command -v zoxide) ]; then
    echo "Error! This command requires 'zoxide' to be installed"
    return
  fi
  if [[ "$#" -ne 0 ]]; then
    cd $(zoxide query -l -- "$@" | head -1)
    return
  fi
  zoxide query -l | fzf -1 +m --no-sort --height 40%
}

zi() {
  zoxide query -l -- "$@" | fzf -1 +m --no-sort --height 40%
}

cdz () {
  local i="$*"
  if test -d "$i"; then
    cd "$i"
  else
    z "$i"
  fi
}

########################################
# from: https://junegunn.kr/2015/04/browsing-chrome-history-with-fzf
# see also: https://gist.github.com/junegunn/15859538658e449b886f - chrome bookmarks
########################################
# ch - browse chromium history
ch() {
  local cols sep
  cols=$(( COLUMNS / 3 ))
  sep='{::}'

  cp -u ~/.config/chromium/Default/History /tmp/h

  sqlite3 -separator $sep /tmp/h \
    "select substr(title, 1, $cols), url
     from urls order by last_visit_time desc" |
  awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
  fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs xdg-open
}

#------------------------------------------------------------------
#   Git Helpers
#------------------------------------------------------------------

is_git_repo() {
    git rev-parse --git-dir > /dev/null 2>&1;
}

fgadd() {
  if ! is_git_repo; then
    echo "No git repository found"
    return;
  fi
  git ls-files -m -o --exclude-standard | fzf --print0 -m | xargs -0 -t -o --no-run-if-empty git add $@
}

fgrecent() {
  if ! is_git_repo; then
    echo "No git repository found"
    return;
  fi
  
  local format="\
%(HEAD) \
%(color:yellow)%(refname:short)%(color:reset)|\
%(color:bold red)%(objectname:short)%(color:reset) \
%(color:bold green)(%(committerdate:relative))%(color:reset) \
%(color:bold blue)%(authorname)%(color:reset) \
%(color:yellow)%(upstream:track)%(color:reset) \
%(color:black)%(color:reset)|\
%(contents:subject)\
%(color:black)%(color:reset)|"
  
  git for-each-ref --count=${1:-10} --sort=-committerdate --color=always "refs/heads/" --format="$format" | column -ts '|' | fzf --ansi +m | sed "s/\* //" | awk '{print $1}' | xargs --no-run-if-empty git checkout
}

fgco() {
  if ! is_git_repo; then
    echo "No git repository found"
    return;
  fi
  
  local format="\
%(HEAD) \
%(color:yellow)%(refname:short)%(color:reset)|\
%(color:bold red)%(objectname:short)%(color:reset) \
%(color:bold green)(%(committerdate:relative))%(color:reset) \
%(color:bold blue)%(authorname)%(color:reset) \
%(color:yellow)%(upstream:track)%(color:reset) \
%(color:black)%(color:reset)|\
%(contents:subject)\
%(color:black)%(color:reset)|"
  
  git branch --all --sort=refname --color=always --format="$format" | column -ts '|' | fzf --ansi --tiebreak=index +m | sed "s/\* //" | awk '{print $1}' | xargs --no-run-if-empty git checkout
}

fgrebase() {
  if ! is_git_repo; then
    echo "No git repository found"
    return;
  fi
  git rebase -i $(git log --color=always --abbrev=7 --format='%C(auto)%h %an %C(blue)%s %C(yellow)%cr' | fzf --ansi +m | cut -d' ' -f1)
}

# git log browser with FZF
fglog () {
  if ! is_git_repo; then
    echo "No git repository found"
    return;
  fi
  
  # param validation
  if [[ ! `git log -n 1 $@ | head -n 1` ]] ;then
    return
  fi

  # filter by file string
  local filter
  # param existed, git log for file if existed
  if [ -n $@ ] && [ -f $@ ]; then
    filter="-- $@"
  fi

  # git command
  local gitlog=(
    git log
    --graph --color=always
    --abbrev=7
    --format='%C(auto)%h %an %C(blue)%s %C(yellow)%cr'
    $@
  )
  
  local displayFn="grep -o '[a-f0-9]\{7\}' | head -1 | xargs -I % sh -c 'git show --color=always % $filter | less -R'"

  # fzf command
  local fzf=(
    fzf
    --ansi --no-sort --reverse --tiebreak=index +m
    --preview "f() { set -- \$(echo -- \$@ | grep -o '[a-f0-9]\{7\}'); [ \$# -eq 0 ] || git show --color=always \$1 $filter; }; f {}"
    --bind "j:down,k:up,ctrl-j:preview-down,ctrl-k:preview-up,ctrl-f:preview-page-down,ctrl-b:preview-page-up,ctrl-q:abort,ctrl-m:execute:
                ($displayFn) << 'FZF-EOF'
                {}
                FZF-EOF"
    --bind "f3:execute:
                ($displayFn) << 'FZF-EOF'
                {}
                FZF-EOF"
    --preview-window=right:60%
  )

  $gitlog | $fzf
}

# fstash - easier way to deal with stashes
# type fstash to get a list of your stashes
# enter shows you the contents of the stash
fgstash() {
  if ! is_git_repo; then
    echo "No git repository found"
    return;
  fi
  
  # git command
  local gitstash=(
    git stash list --color=always --format="%C(yellow)%C(bold)%gd%C(reset) %s %C(black)%C(bold)%cr"
  )
  
  local displayFn="grep -o 'stash@{[0-9]\+}' | head -1 | xargs -I % sh -c 'git stash show -p --color=always % | less -R'"
  
  # fzf command
  local fzf=(
    fzf 
    --ansi +m --no-sort --reverse --tiebreak=index 
    --preview 'f() { set -- $(echo -- "$@" | grep -o "stash@{[0-9]\+}"); [ $# -eq 0 ] || git stash show -p --color=always $1 ; }; f {}'
    --bind "j:down,k:up,ctrl-j:preview-down,ctrl-k:preview-up,ctrl-f:preview-page-down,ctrl-b:preview-page-up,ctrl-q:abort,ctrl-m:execute:
                ($displayFn) << 'FZF-EOF'
                {}
                FZF-EOF"
    --bind "f3:execute:
                ($displayFn) << 'FZF-EOF'
                {}
                FZF-EOF"
    --preview-window=right:60%
  )
  
  $gitstash | $fzf
}

gj() {
  if ! is_git_repo; then
    echo "No git repository found"
    return;
  fi
  git for-each-ref --sort=-committerdate --format='%(refname:short)' refs/heads | grep -E "${1:-$}" -q
  if [ $? -eq 1 ]; then
    echo "No Found"
    git fetch --quiet
  fi
  git for-each-ref --sort=-committerdate --format='%(refname:short)' refs/heads | grep -E "${1:-$}" | fzf +m -0 | xargs --no-run-if-empty git checkout
}

#------------------------------------------------------------------
#   Docker Helpers
#------------------------------------------------------------------
docker_clean() {
  echo "+ clean containers"
  docker ps -a | grep -v 'NAMES' | grep -v 'Up ' | awk '{ print $NF }' | xargs docker rm

  echo "+ clean images"
  docker images | grep '^<none>' | awk '{ print $3 }' | xargs docker rmi
}

docker_killall() {
  echo "+ killing all containers"
  docker ps | awk '{print $NF}' | grep -v 'NAMES' | xargs docker kill
}

docker_stopall() {
  echo "+ stopping all containers"
  docker ps | awk '{print $NF}' | grep -v 'NAMES' | xargs docker stop
}

# Select a docker container to start and exec to
da() {
  local cid
  cid=$(docker ps | sed 1d | fzf -1 +m -q "$1" | awk '{print $1}')

  [ -n "$cid" ] && docker exec -it "$cid" /bin/bash
}

# Select a running docker container to stop
ds() {
  local cid
  cid=$(docker ps | sed 1d | fzf +m -q "$1" | awk '{print $1}')

  [ -n "$cid" ] && docker stop "$cid"
}

docker_exec="$(which docker)"

docker() {
  case "$@" in
  clean)
    docker_clean
    return 0;;
  stopall)
    docker_stopall
    return $?;;
  killall)
    docker_killall
    return $?;;
  esac
  $docker_exec $@
}