# -----------------------------------------------------------------------------
# This config is targeted for tmux 2.1+ and should be placed in $HOME.
#
# Read the "Plugin Manager" section (bottom) before trying to use this config!
# -----------------------------------------------------------------------------
# good practice: don't use different aliases for the same command
#   set  --> set-option
#   setw --> set-window-option
#   run  --> run-shell
#   bind --> bind-key
#       -r flag: enable keep hitting bind key without prefix
#       -n flag: enable bind key without prefix
#       -g flag: global

# -----------------------------------------------------------------------------
# Global options
# -----------------------------------------------------------------------------

# Set a new prefix / leader key.
set -g prefix ²
bind -r ² send-prefix

# no more bell messages
set -g bell-action any
set -g visual-bell off
set -g visual-activity off
set -g visual-silence off
set -g monitor-activity on

# Allow opening multiple terminals to view the same session at different sizes.
setw -g aggressive-resize on

# refresh time interval, escape pause time and message time
set -g status-interval 1
set -sg escape-time 0 # Remove delay when switching between Vim modes.
set -g display-time 1000
set -g display-panes-time 10000

# Allow Vim's FocusGained to work when your terminal gains focus.
# Requires Vim plugin: https://github.com/tmux-plugins/vim-tmux-focus-events
set -g focus-events on

# Add a bit more scroll history in the buffer.
set -g history-limit 50000

# Enable color support inside of tmux.
set -g default-terminal "screen-256color"

# Ensure window titles get renamed automatically.
setw -g automatic-rename on

# Start windows and panes index at 1, not 0.
set -g base-index 1
setw -g pane-base-index 1
set -g renumber-windows on

# Set window notifications
setw -g monitor-activity on
set -g visual-activity on

# Enable full mouse support.
setw -g mouse on

# Use emacs / readline key-bindings in the tmux command prompt
set -g status-keys "emacs"

# Use vim keybindings in copy mode
setw -g mode-keys vi

# Define separator for word selection
set -g word-separators " ;\'\`\""

# set active/passive window style color
set -g window-style bg=colour233
set -g window-active-style bg=colour0

# set active/passive pane color
set -g display-panes-active-colour colour205
set -g display-panes-colour colour252
set -g pane-border-bg colour233
set -g pane-border-fg colour240
set -g pane-active-border-bg colour233
set -g pane-active-border-fg colour240

# if you use Neovim in tmux, you might experience a cursor problem: it doesn’t change from rectangle to pipe when you go from Normal Mode to Insert Mode. The following line might help
set -ga terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q'

# powerline
#source-file '/usr/share/powerline/bindings/tmux/powerline.conf' # default powerline theme (replaced by tmux-themepack)

# Unbind default keys
unbind C-b
unbind '"'
unbind %

# Reload the tmux config.
bind r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"
bind R refresh-client

# Man page
bind M command-prompt -p "Manpage:" "neww 'MANWIDTH=80 man %%'"
bind m command-prompt -p "Manpage:" "split-window -h 'MANWIDTH=80 man %%'"
bind T command-prompt -p "Manpage:" "neww 'tldr -p %%'"
bind t command-prompt -p "Manpage:" "split-window -h 'tldr -p %%'"

# htop
bind '%' neww "exec htop"

# Save history
bind P command-prompt -p 'save history to filename:' -I '~/tmux.history' 'capture-pane -S -50000 ; save-buffer %1 ; delete-buffer'

# Split panes.
bind | split-window -h -c '#{pane_current_path}'
bind \ split-window -h
bind - split-window -v -c '#{pane_current_path}'
bind _ split-window -v

isVim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

# select pane (Alt + arrow keys).
bind -n S-Up if "$isVim" "send S-Up" "select-pane -U"
bind -n S-Left if "$isVim" "send S-Left" "select-pane -L"
bind -n S-Down if "$isVim" "send S-Down" "select-pane -D"
bind -n S-Right if "$isVim" "send S-Right" "select-pane -R"
bind Tab select-pane -l
# h(left), j(down), k(up), l(right)
bind K select-pane -U\; refresh-client -S
bind J select-pane -D\; refresh-client -S
bind L select-pane -R\; refresh-client -S
bind H select-pane -L\; refresh-client -S

# resize pane (Control + Shift + arrow keys)
bind -n C-S-Left resize-pane -L
bind -n C-S-Right resize-pane -R
bind -n C-S-Down resize-pane -D
bind -n C-S-Up resize-pane -U
# C-<Letter> and C-S-<Letter> are equivalent
bind -r C-k resize-pane -U
bind -r C-j resize-pane -D
bind -r C-l resize-pane -R
bind -r C-h resize-pane -L
bind    z resize-pane -Z # toggle maximize pane

# Synchronize panes (print to all panes in a window at once)
bind e setw synchronize-panes

# Move pane between windows
# syntax: [session]:window -> session is optional, but including the : is mandatory
bind < command-prompt -p "join pane from: "  "join-pane -h -s '%%'"
bind > command-prompt -p "send pane to:"  "join-pane -t '%%'"

# Alt arrow to switch windows
bind -n M-Left  previous-window
bind -n M-Right next-window
bind -n M-Up last-window \; refresh-client -S
bind -r M-h previous-window \; refresh-client -S
bind -r M-l next-window     \; refresh-client -S
bind    M-k last-window     \; refresh-client -S
bind    M-- last-window     \; refresh-client -S

bind F1 select-window -t 1
bind F2 select-window -t 2
bind F3 select-window -t 3
bind F4 select-window -t 4
bind F5 select-window -t 5
bind F6 select-window -t 6
bind F7 select-window -t 7
bind F8 select-window -t 8

# window manipulations
bind M-m command-prompt -p "Move window to:" "move-window -t %%"
bind M-s command-prompt -p "Swap window with:" "swap-window -t %%"

# session navigation
bind C new-session
bind S switch-client -l

# kill commands
bind -n C-w if "$isVim" "send C-w" "kill-pane"
bind -n M-w kill-window
bind q confirm-before kill-session
bind Q confirm-before kill-server

# Copy mode
bind C-y copy-mode
bind C-p paste-buffer
bind -T copy-mode-vi C-Left send-key -X previous-word
bind -T copy-mode-vi C-Right send-key -X next-word

# open prompt for running tmux command
bind : command-prompt

# Drag to re-order windows
bind -n MouseDrag1Status swap-window -t=

# Double click on the window list to open a new window
bind -n DoubleClick1Status new-window

is_wsl="hash clip.exe"
has_xclip="hash xclip"
# Copy selection to clipboard on mouse release (already managed by 'tmux-yank')
#if '$is_wsl' \
#    'bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "clip.exe"'
#if '[ -n "$DISPLAY" ] && $has_xclip' \
#    'bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "xclip -in -sel clipboard"'

# Double LMB Select & Copy (Word)
if '$is_wsl' ' \
    bind -T copy-mode-vi DoubleClick1Pane \
        select-pane \; \
        send-keys -X select-word \; \
        send-keys -X copy-pipe "clip.exe"'
if '$is_wsl' ' \
    bind -n DoubleClick1Pane if -Ft= "#{mouse_any_flag}" "send-keys -M" "\
        select-pane \; \
        copy-mode -M \; \
        send-keys -X select-word \; \
        send-keys -X copy-pipe \"clip.exe\""'

if '[ -n "$DISPLAY" ] && $has_xclip' ' \
    bind -T copy-mode-vi DoubleClick1Pane \
        select-pane \; \
        send-keys -X select-word \; \
        send-keys -X copy-pipe "xclip -in -sel clipboard"'
if '[ -n "$DISPLAY" ] && $has_xclip' ' \
    bind -n DoubleClick1Pane if -Ft= "#{mouse_any_flag}" "send-keys -M" "\
        select-pane \; \
        copy-mode -M \; \
        send-keys -X select-word \; \
        send-keys -X copy-pipe \"xclip -in -sel clipboard\""'

# Triple LMB Select & Copy (Line)
if '$is_wsl' ' \
    bind -T copy-mode-vi TripleClick1Pane \
        select-pane \; \
        send-keys -X select-line \; \
        send-keys h \; \
        send-keys -X copy-pipe "clip.exe"'
if '$is_wsl' ' \
    bind -n TripleClick1Pane \
        select-pane \; \
        copy-mode -M \; \
        send-keys -X select-line \; \
        send-keys h \; \
        send-keys -X copy-pipe "clip.exe"'

if '[ -n "$DISPLAY" ] && $has_xclip' ' \
    bind -T copy-mode-vi TripleClick1Pane \
        select-pane \; \
        send-keys -X select-line \; \
        send-keys h \; \
        send-keys -X copy-pipe "xclip -in -sel clipboard"'
if '[ -n "$DISPLAY" ] && $has_xclip' ' \
    bind -n TripleClick1Pane \
        select-pane \; \
        copy-mode -M \; \
        send-keys -X select-line \; \
        send-keys h \; \
        send-keys -X copy-pipe "xclip -in -sel clipboard"'

# right mouse button to paste from clipboard
if '[ -n "$DISPLAY" ] && $has_xclip' \
    'bind -n MouseDown3Pane if -Ft= "#{mouse_any_flag}" "send-keys -M" "run \"tmux set-buffer \\\"$(xclip -o -sel clipboard)\\\"; tmux paste-buffer\""' # X Server
if '[ -n "$DISPLAY" ] && $has_xclip' \
    'bind -T copy-mode-vi MouseDown3Pane send-keys -X cancel \; run "tmux set-buffer \"$(xclip -o -sel clipboard)\"; tmux paste-buffer"' # X Server
    
if '$is_wsl' \
    'bind -n MouseDown3Pane if -Ft= "#{mouse_any_flag}" "send-keys -M" "run \"tmux set-buffer \\\"$(powershell.exe Get-Clipboard | tr -d \"\r\")\\\"; tmux paste-buffer\""' # WSL
if '$is_wsl' \
    'bind -T copy-mode-vi MouseDown3Pane send-keys -X cancel \; run "tmux set-buffer \"$(powershell.exe Get-Clipboard | tr -d \"\r\")\"; tmux paste-buffer"' # WSL

# clear terminal in focus
bind -n C-l run '            \
    tmux send-keys C-c;      \
    tmux send-keys clear;    \
    sleep 0.1;               \
    tmux send-keys Enter;    \
    tmux clear-history;      \
    '\; display-message "History cleared..."

# -----------------------------------------------------------------------------
# Plugin Manager - https://github.com/tmux-plugins/tpm
# In order to use the plugins below you need to install TPM and the plugins.
#   Step 1) git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
#   Step 2) Reload tmux if it's already started with `r
#   Step 3) Launch tmux and hit `I (capital i) to fetch any plugins
# -----------------------------------------------------------------------------
# TPM Shortcuts
#   I    install new plugins
#   U    update plugins
#   M-u  uninstall plugin not on the plugin list
#
# tmux-yank shortcuts
#  Normal mode
#   <prefix> + y : copy text from the command line to the clipboard
#   <prefix> + Y : copy working directory to the clipboard
#  Copy mode
#   y : copy selection to clipboard
#   Y : copy selection and paste it to the command line
#
# tmux-resurrect
#   <prefix> + Ctrl-s - save
#   <prefix> + Ctrl-r - restore
#
# tmux-copycat
#   <prefix> + / - regexp search
#   <prefix> + ctrl-f - simple file search
#   <prefix> + ctrl-g - jumping over git status files (best used after git status command)
#   <prefix> + alt-h - jumping over SHA-1/SHA-256 hashes (best used after git log command)
#   <prefix> + ctrl-u - url search (http, ftp and git urls)
#   <prefix> + ctrl-d - number search (mnemonic d, as digit)
#   <prefix> + alt-i - ip address search
#   n : next match
#   N : previous match
#   Enter : copy highlighted match
#
# tmux-open
#   <prefix> + o - open a highlighted selection with the system default program
#   <prefix> + ctrl-o - open a highlighted selection with the $EDITOR
# extrakto
#   <prefix> + TAB - start extrakto (fuzzy search the output of your terminal)
#   TAB : insert selection to the current pane
#   Enter : copy selection to the clipboard
#   Ctrl-o : open the selection (path/url)
#   Ctrl-e : edit the selection (path) with $EDITOR
# -----------------------------------------------------------------------------

# List of plugins.
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'jimeh/tmux-themepack'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'laktak/extrakto'
set -g @themepack 'powerline/block/green'

# tmux-yank options
set -g @yank_selection_mouse 'clipboard'
set -g @yank_action 'copy-pipe'

# Initialize TPM (keep this line at the very bottom of your tmux.conf).
run '~/.tmux/plugins/tpm/tpm'

# Override some configuration
set -g window-style bg=colour233
set -g window-active-style bg=colour0
set -g pane-border-style bg=colour233,fg=colour240
set -g pane-active-border-style bg=colour233,fg=colour240
