[credential]
	helper = store --file ~/.git-credentials
	helper = cache --timeout 36000
[user]
	name = Frederic JOSEPH
	email = fredjoseph@users.noreply.github.com
[alias]
	patch-stat = apply --stat   # output diffstat for the input. Turns off "apply"
	patch-check = apply --check  # check patch is applicable and detects errors. Turns off "apply"
	#############
	br = branch
	branches = branch -a  # list all branches
	remote-branches = branch -r  # list remote branches
	merged-branches =  branch --merged # List merged branches into HEAD (or into <branchName>)
	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"
	# Remove branches that have already been merged with master (a.k.a 'delete merged')
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d; git remote -v update -p"
	#############
	ci = commit
	ci-nomsg = commit --allow-empty-message -m ''
	ci-noedit = commit --no-edit
	amend = commit --amend --no-edit
	#############
	cl = clone
	#############
	cp = cherry-pick
	#############
	desc = describe --tags --always # describes the branch state
	#############
	d = diff --patch-with-stat # diff between the Working Directory and the Staging Area (for tracking files)
	dc = diff --patch-with-stat --cached  # diff between the Staging Area and the HEAD
	dh = diff --patch-with-stat HEAD  # diff between the Working Directory and the HEAD (for tracking files)
	# `git dn $number` shows the diff between the state `$number` revisions ago and the current state
	dn = !"d() { git diff --patch-with-stat HEAD~${1-0}; }; d"
	dt = difftool
	#############
	f = fetch
	fo = fetch origin
	fu = fetch upstream
	#############
	check = fsck   # Verifies the connectivity and validity of the objects in the database.
	#############
	g = grep -Ii # Print lines matching a pattern
	gp = grep -I -P # Use Perl-compatible regular expressions for patterns.
	#############
	l = log --oneline --graph
	lg = log --pretty=format:'%C(yellow)%h%C(auto)%d %Creset%s %Cgreen(%cr) %C(bold blue)<%an>' --all --decorate --graph
	lgg = !"f() { git lg --grep=\"$@\"; };f"
	#############
	ls = ls-files
	lsg = !git ls-files | grep -i   # find git files matching the given <pattern>
	#############
	m = merge
	mt = mergetool
	#############
	co = checkout
	cob = checkout -b
	#############
	pr = prune -v
	#############
	push-remote = push -u origin $1
	#############
	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~${1-1}; }; r"
	#############
	re = reset
	#############
	r = remote
	remotes = remote -v
	#############
	st = status
	sst = status -s -b
	#############
	sa = stash apply
	sc = stash clear
	sd = stash drop
	sl = stash list
	sp = stash pop
	sw = stash show
	#############
	t = tag
	tags = tag -l
	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"
	#############
	release = !sh -c 'git tag v$1 && git push --tags' -
	unrelease = !sh -c 'git tag -d v$1 && git push origin :v$1' -
	aliases = !git config -l | grep alias | cut -c 7- | sort
	snap = !git stash save 'snapshot: $(date)' && git stash apply 'stash@{0}'
	bare = !sh -c 'git symbolic-ref HEAD refs/heads/$1 && git rm --cached -r . && git clean -xfd' -
	devel = !git checkout devel && git pull origin devel
	up-branch = !git fetch origin $1:$1
	unstage = reset HEAD -- .
	prune-local = !git branch --merged | grep -v master | grep -v dev | grep -v devel | xargs -n 1 git branch -d
	root = rev-parse --show-toplevel
	fetch-check = fetch --dry-run -v
	nuke = !git clean -df && git reset --hard @{u}  # cleans up files that donâ€™t belong and throws away any new commits
	toss = reset --hard @{u}    # throws away any new commits
	undo = !git reset HEAD~1 --mixed
	in = !git remote update -p; git log ..@{u}  # shows commits that will come in from the remote
	out = log @{u}..    # shows commits that will go out to the remote
	standup = shortlog --since=yesterday
	today = shortlog --since=midnight
	mdiff = "!f() { git stash | head -1 | grep -q 'No local changes to save'; x=$?; git merge --no-commit $1 &>/dev/null; git add -u &>/dev/null; git diff --staged; git reset --hard &>/dev/null; test $x -ne 0 && git stash pop &>/dev/null; }; f"
	list-conflicts = diff --name-only --diff-filter=U
	list-commit-files = !git show --name-only $1
	list-staged-files = diff --name-only --cached
[pull]
	rebase = true
[help]
	# Automatically correct and execute mistyped commands
	autocorrect = 1
