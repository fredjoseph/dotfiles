[credential]
	helper = store --file ~/.git-credentials
	helper = cache --timeout 36000
[user]
	name = Frederic JOSEPH
	email = fredjoseph@users.noreply.github.com
[stash]
	usebuiltin = true
[alias]
	a = add --all
	ai = add -i
	#############
	ap = apply  # apply patch
	as = apply --stat   # output diffstat for the input. Turns off "apply"
	ac = apply --check  # check patch is applicable and detects errors. Turns off "apply"
	#############
	br = branch
	bra = branch -a  # list all branches
	branches = !git bra
	brd = branch -d  # branch delete <branchName>
	brdd = branch -D # force branch delete <branchName>
	brr = branch -r  # list remote branches
	bru = !git rev-parse --abbrev-ref --symbolic-full-name "@{u}"    # set <branchName>'s upstream branch
	brc = rev-parse --abbrev-ref HEAD
	brm = branch --merged # List merged branches into HEAD (or into <branchName>)
	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"
	# Remove branches that have already been merged with master (a.k.a 'delete merged')
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d; git remote -v update -p"
	#############
	ci = commit
	cim = commit -m
	cia = commit -a  # Automatically stage modified/deleted files
	ciam = commit -am
	cie = commit --allow-empty-message -m ''
	amend = commit --amend --no-edit
	amendm = commit --amend -m
	amenda = commit -a --amend --no-edit
	amendam = commit -a --amend -m
	#############
	cl = clone
	#############
	cp = cherry-pick
	cpa = cherry-pick --abort
	cpc = cherry-pick --continue
	#############
	desc = describe --tags --always # describes the branch state
	#############
	d = diff --patch-with-stat # diff between the Working Directory and the Staging Area (for tracking files)
	dc = diff --patch-with-stat --cached  # diff between the Staging Area and the HEAD
	dh = diff --patch-with-stat HEAD  # diff between the Working Directory and the HEAD (for tracking files)
	# `git dn $number` shows the diff between the state `$number` revisions ago and the current state
	dn = !"d() { git diff --patch-with-stat HEAD~${1-0}; }; d"
	dt = difftool
	dtc = difftool --cached
	#############
	f = fetch
	fo = fetch origin
	fu = fetch upstream
	#############
	fk = fsck   # Verifies the connectivity and validity of the objects in the database.
	#############
	g = grep -Ii # Print lines matching a pattern
	gp = grep -I -P # Use Perl-compatible regular expressions for patterns.
	#############
	l = log --oneline --graph
	lg = log --pretty=format:'%C(yellow)%h%C(auto)%d %Creset%s %Cgreen(%cr) %C(bold blue)<%an>' --all --decorate --graph
	lgg = !"f() { git lg --grep=\"$@\"; };f"
	#############
	ls = ls-files
	lsg = !git ls-files | grep -i   # find git files matching the given <pattern>
	#############
	m = merge
	ma = merge --abort
	mc = merge --continue
	ms = merge --skip
	#############
	co = checkout
	cob = checkout -b
	#############
	pr = prune -v
	#############
	ps = push
	psf = push -f
	psu = push -u
	pst = push --tags
	#############
	pso = push origin
	psao = push --all origin
	psfo = push -f origin
	psuo = push -u origin
	psom = push origin master
	psaom = push --all origin master
	psfom = push -f origin master
	psuom = push -u origin master
	psoc = !git push origin $(git brc)
	psaoc = !git push --all origin $(git brc)
	psfoc = !git push -f origin $(git brc)
	psuoc = !git push -u origin $(git brc)
	psdc = !git push origin :$(git brc)
	#############
	pl = pull
	pb = pull --rebase
	#############
	plo = pull origin
	pbo = pull --rebase origin
	plom = pull origin master
	ploc = !git pull origin $(git brc)
	pbom = pull --rebase origin master
	pboc = !git pull --rebase origin $(git brc)
	#############
	plu = pull upstream
	plum = pull upstream master
	pluc = !git pull upstream $(git brc)
	pbum = pull --rebase upstream master
	pbuc = !git pull --rebase upstream $(git brc)
	#############
	rb = rebase
	rba = rebase --abort
	rbc = rebase --continue
	rbi = rebase --interactive
	rbia = rebase --interactive --autosquash
	rbs = rebase --skip
	# Interactive rebase with the given number of latest commits
	rbin = "!r() { git rebase -i HEAD~${1-1}; }; r"
	reb = !git rbin
	#############
	re = reset
	rh = reset HEAD
	reh = reset --hard
	rem = reset --mixed
	res = reset --soft
	rehh = reset --hard HEAD
	remh = reset --mixed HEAD
	resh = reset --soft HEAD
	#############
	r = remote
	ra = remote add
	rr = remote rm
	rv = remote -v
	remotes = !git rv
	rn = remote rename
	rp = remote prune
	rs = remote show
	rao = remote add origin
	rau = remote add upstream
	rro = remote remove origin
	rru = remote remove upstream
	rso = remote show origin
	rsu = remote show upstream
	rpo = remote prune origin
	rpu = remote prune upstream
	#############
	rmf = rm -f
	rmrf = rm -r -f
	#############
	st = status
	sts = status -s -b
	#############
	sa = stash apply
	sc = stash clear
	sd = stash drop
	sl = stash list
	sp = stash pop
	sps = stash push -u
	spsm = stash push -u -m
	spsk = stash push -u -k
	spskm = stash push -u -k -m
	sw = stash show
	#############
	t = tag
	tags = tag -l
	td = tag -d
	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"
	#############
	w = show
	wp = show -p    # generate patch
	wr = show -p --no-color
	#############
	bump = !sh -c 'git commit -am \"Version bump v$1\" && git psuoc && git release $1' -
	release = !sh -c 'git tag v$1 && git pst' -
	unrelease = !sh -c 'git tag -d v$1 && git pso :v$1' -
	merged = !sh -c 'git co master && git plom && git brd $1 && git rpo' -
	aliases = !git config -l | grep alias | cut -c 7- | sort
	snap = !git stash save 'snapshot: $(date)' && git stash apply 'stash@{0}'
	bare = !sh -c 'git symbolic-ref HEAD refs/heads/$1 && git rm --cached -r . && git clean -xfd' -
	devel = !git checkout devel && git pull origin devel
	master = !git checkout master && git pull origin master
	update-br = !git fetch origin "$1":"$1"
	unstage = reset HEAD -- .
	prune-local = !git branch --merged | grep -v master | grep -v dev | grep -v devel | xargs -n 1 git branch -d
	root = rev-parse --show-toplevel
	check = fetch --dry-run -v
	nuke = !git clean -df && git reset --hard @{u}  # cleans up files that donâ€™t belong and throws away any new commits
	toss = reset --hard @{u}    # throws away any new commits
	undo = !git reset HEAD~1 --mixed
	in = !git remote update -p; git log ..@{u}  # shows commits that will come in from the remote
	out = log @{u}..    # shows commits that will go out to the remote
	standup = shortlog --since=yesterday
	today = shortlog --since=midnight
	mdiff = "!f() { git stash | head -1 | grep -q 'No local changes to save'; x=$?; git merge --no-commit $1 &>/dev/null; git add -u &>/dev/null; git diff --staged; git reset --hard &>/dev/null; test $x -ne 0 && git stash pop &>/dev/null; }; f"
[pull]
	rebase = true
[help]
	# Automatically correct and execute mistyped commands
	autocorrect = 1
